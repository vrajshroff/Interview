module Life where

import Data.Function (on)
import Data.List (groupBy, intercalate, nub, sort)
import Data.Ord (comparing)
import Data.Semigroup ((<>))

{-
The way that we are going to model the state of the game is by keeping track
of the cells that are alive in a list. Each cell will be identified by an
an `(Int, Int)` tuple where the components correspond to the x and y position
of the cell respectively.
-}

type Cell = (Int, Int)
type Generation = [Cell]

{-
The first step is to create a function that can give us the neighbors of a
given cell: horizontally,vertically, and diagonally.
-}

neighbors :: Cell -> [Cell]
neighbors cell = [(x+1,y), (x-1,y), (x,y+1), (x,y-1), (x+1,y+1), (x-1,y+1), (x+1,y-1), (x-1,y-1)]
  where
    x = fst cell
    y = snd cell

{-
This next function will take in a cell and the list of cells that are alive and
tell you whether that cell should be alive in the next generation. Refer to the
rules above for the exact logic.
-}

shouldBeAlive :: Cell -> Generation -> Bool
shouldBeAlive cellGiven generationGiven =
  if ((cellStatus == True) && ((numberOfLiveNeighbours == 2) || (numberOfLiveNeighbours == 3))) then True
  else if ((cellStatus == False) && (numberOfLiveNeighbours == 3)) then True
  else False

 where
  cellStatus = cellGiven `elem` generationGiven
  cellNeighbours = neighbors cellGiven
  numberOfLiveNeighbours = numberOfLiveNeighboursFunction cellNeighbours

  numberOfLiveNeighboursFunction :: Generation -> Int
  numberOfLiveNeighboursFunction [] = 0
  numberOfLiveNeighboursFunction (x: t) =
    if (x `elem` generationGiven) then 1 + numberOfLiveNeighboursFunction t
    else 0 + numberOfLiveNeighboursFunction t

{-
Given a list of the cells that are alive `potentiallyAliveCells` will return a
list of the cells that could possibly be alive in the next generation. In other
words, this function will give us the list of cells we need to check when
computing the next generation. 

In order to write this function, it is helpful to first implement `yourConcat`
which takes a list of lists and flatten it to a list. 

    yourConcat [[2, 1], [], [5], [7]] --> [2,1,5,7]

Once again, we use the `your` prefix because the Haskell standard library
includes a function named `concat`.
-}

yourConcat :: [[a]] -> [a]
yourConcat [] = []
yourConcat ([]:x) = yourConcat x
yourConcat ((x:xs):vs) = x : yourConcat (xs:vs)

potentiallyAliveCells :: Generation -> [Cell]
potentiallyAliveCells aliveCells =
  nub $ aliveCells ++ yourConcat (map neighbors aliveCells)

{-
Given a list of cells that are alive in this generation, this function will
give you a list of cells that are alive in the next generation. 
-}

nextGeneration :: Generation -> Generation
nextGeneration aGen = nextGenHelp (potentiallyAliveCells aGen)
  where
    nextGenHelp :: Generation -> Generation
    nextGenHelp [] = []
    nextGenHelp [x] =
      if (shouldBeAlive x aGen) then [x]
      else []
    nextGenHelp (x:t) =
      if (shouldBeAlive x aGen) then [x] ++ nextGenHelp t
      else [] ++ nextGenHelp t

{-
The last function that you need to write will take in a number and initial seed
and return a list of that many generations. Since each generation is
represented as a list of cells that are alive, the return type is
-}

generations :: Int -> Generation -> [Generation]
generations intGiven generationGiven =
  take intGiven (iterate (\x -> nextGeneration x) generationGiven)
